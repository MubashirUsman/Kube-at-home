---
- hosts: group1
  become: yes
  vars:
    kubernetes_binaries:
      - name: kubeadm
        url: "curl -L -o /usr/local/bin/kubeadm https://dl.k8s.io/release/{{ kube_version }}/bin/linux/amd64/kubeadm"
      - name: kubectl
        url: "curl -L -o /usr/local/bin/kubectl https://dl.k8s.io/release/{{ kube_version }}/bin/linux/amd64/kubectl"
      - name: kubelet
        url: "curl -L -o /usr/local/bin/kubelet https://dl.k8s.io/release/{{ kube_version }}/bin/linux/amd64/kubelet"
  tasks:
    - name: Set Hostname
      ansible.builtin.hostname:
        name: "{{ item }}"
      loop:
        - node-a
    - name: IP address of node
      shell: ip addr show | grep inet | grep -v inet6 | awk '{print $2}' | grep 192
      register: ip_node_a
    - name: Display node-a ip
      debug:
        var: ip_node_a.stdout
    - name: Get Kube Version
      ansible.builtin.shell:
        cmd: "export kube-version=(curl -sL https://dl.k8s.io/release/stable.txt)"
      args:
        executable: /bin/bash
    - name: Kubernetes version as fact
      ansible.builtin.set_fact:
        kube_version: "{{ lookup('env', 'kube-version') }}"
    - name: Display kube version
      debug:
        var: kube_version
    - name: Check if Kube binaries already present
      ansible.builtin.stat:
        path: "/usr/local/bin/{{ item.name }}"
      loop: "{{ kubernetes_binaries }}"
      register: kube_binary_status
    - name: Install Kube/let/adm/ctl binaries (make them executable)
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "/usr/local/bin/{{ item.name }}"
        mode: "0755"
      loop: "{{ kubernetes_binaries }}"
      when: not kube_binary_status.results[item_index].stat.exists
    - name: Create kubelet drop-in file directory
      ansible.builtin.file:
        path: /etc/systemd/system/kubelet.service.d
        state: directory
        mode: '0755'
    - name: Create systemd kubelet file to override /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
      ansible.builtin.copy:
        dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        content: |
          [Service]
          Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
          Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
          Environment="KUBELET_EXTRA_ARGS=--node-ip={{ ip_node_a }}"
          # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
          EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
          # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
          # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
          EnvironmentFile=-/etc/default/kubelet
          ExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
    - name: Copy kubelet service file
      ansible.builtin.copy:
        src: /home/mubashirusman/Documents/Kube-at-home/ansible/kubelet.service
        dest: /etc/systemd/service
    - name: Systemd daemon reload
      ansible.builtin.shell:
        cmd: "systemctl daemon-reload && systemctl enable --now kubelet.service"
      args:
        executable: /bin/bash
    - name: Download containerd binary
      ansible.builtin.get_url:
        url: https://github.com/containerd/containerd/releases/download/v1.7.14/containerd-1.7.14-linux-amd64.tar.gz
        dest: /tmp/containerd.tar.gz
        mode: '0755'
    - name: Make containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: present
    - name: Download crictl 
      ansible.builtin.get_url:
        url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.29.0/crictl-v1.29.0-linux-amd64.tar.gz
        dest: /tmp/crictl.tar.gz
        mode: '0755'
    - name: Download CNI
      ansible.builtin.get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz
        dest: /tmp/cni.tar.gz
        mode: '0755'
    - name: Extract containerd in /usr/local/bin
      ansible.builtin.unarchive:
        src: /tmp/containerd.tar.gz
        dest: /usr/local/bin/
        remote_src: yes
        mode: '0755'
    - name: Create directory for CNI binary
      ansible.builtin.file:
        path: /opt/cni/bin
        recurse: true
        state: directory
        mode: '0755'
    - name: Extract CNI in /opt/cni/bin
      ansible.builtin.unarchive:
        src: /tmp/cni.tar.gz
        dest: /opt/cni/bin
        remote_src: yes
    - name: Extract crictl in /usr/local/bin
      ansible.builtin.unarchive:
        src: /tmp/crictl.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        mode: '0755'
    - name: Update packages
      ansible.builtin.apt:
        update_cache: true
    - name: Install runc
      ansible.builtin.apt:
        name: runc
        state: present
    - name: Check the containerd is installed
      ansible.builtin.debug:
        msg: "{{ ansible_facts.packages['containerd'] | length }} versions of containerd are installed!"
      when: "'containerd' in ansible_facts.packages"
    - name: Generate Containerd config
      ansible.builtin.shell:
        cmd: "sudo containerd config default > /tmp/config.toml"
      args:
        executable: /bin/bash
    - name: Check /tmp/config.toml exists
      ansible.builtin.stat:
        path: /tmp/config.toml
      register: containerd_config
    - name: Move the Containerd config when it exists
      ansible.builtin.shell:
        cmd: "mv /tmp/config.toml /etc/containerd"
      args:
        executable: /bin/bash
      when: containerd_config.stat.exists
    - name: Use SystemdCgroup
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
    - name: Ensure SystemdCgroup is true
      ansible.builtin.shell:
        cmd: cat /etc/containerd/config.toml | grep -w "SystemdCgroup = true"
      args:
        executable: /bin/bash
      register: SystemdCgroup
    - name: Display SystemdCgroup is true 
      ansible.builtin.debug:
        msg: "{{ SystemdCgroup }}"
    - name: Systemctl daemon-reload
      ansible.builtin.shell:
        cmd: systemctl daemon-reload
      args:
        executable: /bin/bash
    - name: Download containerd service file
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /etc/systemd/system/containerd.service
        mode: '0644'
    - name: Enable containerd
      ansible.builtin.shell:
        cmd: systemctl enable --now containerd
      args:
        executable: /bin/bash
